from flask import Flask, jsonify, request
from flask_cors import CORS  # Import CORS
from firebase_admin import credentials, initialize_app, db, storage
from datetime import datetime, timedelta
import psycopg2
from PIL import Image
import io

app = Flask(__name__)
CORS(app)  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï CORS ‡∏ó‡∏∏‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô

# Connection String ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Neon PostgreSQL
conn_string = "postgresql://facerecon_owner:NsqA5QSpbT2G@ep-super-bonus-a1hmwxyx.ap-southeast-1.aws.neon.tech/facerecon?sslmode=require"

# Firebase Config
cred = credentials.Certificate('parth.json')
initialize_app(cred, {
    'storageBucket': 'face-recognition-459a6.appspot.com',
    'databaseURL': 'https://face-recognition-459a6-default-rtdb.asia-southeast1.firebasedatabase.app/'})
bucket = storage.bucket()



# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login
@app.route('/api/login', methods=['POST'])
def login():
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• username ‡πÅ‡∏•‡∏∞ password ‡∏à‡∏≤‡∏Å client
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')

        if not username or not password:
            return jsonify({'error': 'Username and password are required'}), 400

        # ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á path 'admin' ‡πÉ‡∏ô Realtime Database
        ref = db.reference('admin')
        admins = ref.get()  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å path 'admin'

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö username ‡πÅ‡∏•‡∏∞ password
        for admin_id, admin_data in admins.items():
            if admin_data.get('user') == username and admin_data.get('password') == password:
                return jsonify({'message': 'Login successful', 'user': username}), 200

        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        return jsonify({'error': 'Invalid username or password'}), 401

    except Exception as e:
        return jsonify({'error': str(e)}), 500


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def get_db_connection():
    conn = psycopg2.connect(conn_string)
    return conn

# API Endpoint: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users)
@app.route('/api/users', methods=['GET'])
def get_users():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        query = "SELECT user_id, name, room_number, total_attendance, last_attendance_time, dominant_emotion,timestamp FROM logs;"
        cursor.execute(query)
        rows = cursor.fetchall()

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON
        users = [{"user_id": row[0], "name": row[1], "room_number": row[2], "total_attendance": row[3], "last_attendance_time": row[4], "dominant_emotion": row[5], "timestamp": row[6] } for row in rows]

        cursor.close()
        conn.close()

        return jsonify(users), 200
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/images', methods=['GET'])
def get_images():
    try:
        bucket = storage.bucket()
        blobs = bucket.list_blobs(prefix="Images/")
        expiration_time = datetime.utcnow() + timedelta(hours=24)
        image_urls = [blob.generate_signed_url(expiration=expiration_time) for blob in blobs]
        return jsonify({"images": image_urls})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/realtime-data', methods=['GET'])
def get_realtime_data_with_images():
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase Realtime Database (path: "room")
        ref = db.reference('room')
        data = ref.get()

        if not data:
            return jsonify({'message': 'No data found'}), 404

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á bucket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Storage
        bucket = storage.bucket()

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô data
        for user_id, user_data in data.items():
            try:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ô Firebase Storage
                image_path = f'Images/{user_id}.png'
                blob = bucket.blob(image_path)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô bucket ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á signed URL
                if blob.exists():
                    expiration_time = datetime.utcnow() + timedelta(hours=24)  # URL ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                    image_url = blob.generate_signed_url(expiration=expiration_time)
                    user_data['image_url'] = image_url
                else:
                    user_data['image_url'] = None  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô bucket
            except Exception as e:
                user_data['image_url'] = None  # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ

        return jsonify(data), 200

    except Exception as e:
        print(f"Error fetching data with images: {e}")
        return jsonify({'error': str(e)}), 500
    
@app.route('/api/delete-user/<string:user_id>', methods=['DELETE'])
def delete_user(user_id):
    try:
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase Realtime Database
        ref = db.reference(f'room/{user_id}')
        if ref.get() is None:
            return jsonify({'error': 'User not found'}), 404
        ref.delete()

        # ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Firebase Storage
        bucket = storage.bucket()
        image_path = f'Images/{user_id}.png'
        blob = bucket.blob(image_path)

        if blob.exists():
            blob.delete()

        return jsonify({'message': 'User deleted successfully'}), 200

    except Exception as e:
        print(f"Error deleting user {user_id}: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/update-user/<string:user_id>', methods=['PUT'])
def update_user(user_id):
    try:
        data = request.form.to_dict()
        new_image = request.files.get('image')  # ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà

        ref = db.reference(f'room/{user_id}')  # ‡πÉ‡∏ä‡πâ Room_Number ‡πÄ‡∏õ‡πá‡∏ô Key
        user_data = ref.get()

        if not user_data:
            return jsonify({'error': 'User not found'}), 404

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö key 'id' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å data ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if 'id' in data:
            del data['id']

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Firebase Realtime Database ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå id
        ref.update(data)

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        if new_image:
            image = Image.open(new_image)
            image = image.resize((216, 216))  # Resize ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 216x216
            image_io = io.BytesIO()
            image.save(image_io, format='PNG')  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG
            image_io.seek(0)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firebase Storage (‡πÉ‡∏ä‡πâ Room_Number ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå)
            bucket = storage.bucket()
            image_path = f'Images/{user_id}.png'  # ‡πÉ‡∏ä‡πâ Room_Number ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            blob = bucket.blob(image_path)
            blob.upload_from_file(image_io, content_type='image/png')

        return jsonify({'message': 'User updated successfully'}), 200

    except Exception as e:
        print(f"Error updating user {user_id}: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/add-user', methods=['POST'])
def add_user():
    try:
        data = request.form.to_dict()  # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Dictionary
        new_image = request.files.get('image')  # ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Room_Number ‡πÅ‡∏•‡∏∞ Name ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not data.get('name') or not data.get('Room_Number'):
            return jsonify({'error': 'Missing required fields'}), 400

        room_number = str(data.get('Room_Number'))  # ‡πÉ‡∏ä‡πâ Room_Number ‡πÄ‡∏õ‡πá‡∏ô Key ‡πÉ‡∏ô Firebase
        data['last_attendance_time'] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤

        # üìå ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á total_attendance ‡πÅ‡∏•‡∏∞ starting_year ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô int
        if 'total_attendance' in data:
            try:
                data['total_attendance'] = int(data['total_attendance'])
            except ValueError:
                data['total_attendance'] = 0  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô 0

        if 'starting_year' in data:
            try:
                data['starting_year'] = int(data['starting_year'])
            except ValueError:
                data['starting_year'] = datetime.utcnow().year  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

        # üìå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        if new_image:
            image = Image.open(new_image)
            image = image.resize((216, 216))  # Resize ‡πÄ‡∏õ‡πá‡∏ô 216x216
            image_io = io.BytesIO()
            image.save(image_io, format='PNG')
            image_io.seek(0)

            # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firebase Storage
            bucket = storage.bucket()
            image_path = f'Images/{room_number}.png'  # ‡πÉ‡∏ä‡πâ Room_Number ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            blob = bucket.blob(image_path)
            blob.upload_from_file(image_io, content_type='image/png')

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firebase **‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° image_url**
        ref = db.reference(f'room/{room_number}')
        ref.set(data)

        return jsonify({'message': 'User added successfully', 'room_number': room_number, 'last_attendance_time': data['last_attendance_time']}), 201

    except Exception as e:
        print(f"Error adding user: {e}")
        return jsonify({'error': str(e)}), 500
    
@app.route('/api/upload-face-images', methods=['POST'])
def upload_face_images():
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Room_Number ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        room_number = request.form.get('Room_Number')
        face_images = request.files.getlist('faceImages')

        if not room_number or not face_images:
            return jsonify({'error': 'Missing Room Number or face images'}), 400

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Firebase Storage
        folder_path = f'trainface/{room_number}/'
        bucket = storage.bucket()

        uploaded_files = []
        for idx, face_image in enumerate(face_images):
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            face_io = io.BytesIO(face_image.read())
            face_path = f'{folder_path}face_{idx}.png'
            blob = bucket.blob(face_path)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
            blob.upload_from_file(io.BytesIO(face_io.getvalue()), content_type='image/png')

            # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            uploaded_files.append(blob.public_url)

        return jsonify({
            'message': 'Face images uploaded successfully',
            'room_number': room_number,
            'uploaded_files': uploaded_files
        }), 201

    except Exception as e:
        print(f"Error uploading face images: {e}")
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True)
